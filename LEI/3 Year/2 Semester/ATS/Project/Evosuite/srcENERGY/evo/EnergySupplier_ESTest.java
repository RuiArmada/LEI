/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 18:03:55 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnergySupplier_ESTest extends EnergySupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("`KRW\nJ/>");
      EnergySupplier energySupplier1 = new EnergySupplier("`KRW\nJ/>");
      energySupplier1.setPrice(347.1383);
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertEquals(347.1383, energySupplier1.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.setTaxes((-1.0));
      EnergySupplier energySupplier1 = energySupplier0.clone();
      assertEquals((-1.0), energySupplier1.getTaxes(), 0.01);
      
      energySupplier1.setTaxes(0.0);
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("", (-29.4));
      // Undeclared exception!
      try { 
        energySupplier0.setSmartDeviceOnOff((-147), 20, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("9");
      energySupplier0.addInvoice("9", (-3810), 52, 52, 52);
      energySupplier0.addInvoice(",X'd CIq`k| _C", 52, (-125), 52, (-3394.6723));
      double double0 = energySupplier0.maxValue();
      assertEquals(52.0, double0, 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.addCasaInteligente("W", (-186), "W");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-186));
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Double double0 = new Double((-19.06));
      hashMap1.put(integer0, double0);
      energySupplier0.priceFormula(hashMap0, hashMap1, (-186));
      assertEquals(1, hashMap0.size());
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.addCasaInteligente("W", (-186), "W");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        energySupplier0.priceFormula(hashMap0, hashMap1, (-186));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("nm]m3_T$}q");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      energySupplier0.priceFormula(hashMap0, hashMap0, 128);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(1.0, energySupplier0.dailyConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      CasaInteligente casaInteligente0 = new CasaInteligente("1Arl_qR(dUqg", 1);
      SmartCamera smartCamera0 = new SmartCamera((-2144179827), 0.9, (-2144179827), 1, 3514.3473615231646, 1.9000000000000001);
      casaInteligente0.addSmartDevice(1, "y", smartCamera0);
      energySupplier0.addCasaInteligente(1, casaInteligente0, ", totalConsumption=");
      energySupplier0.setSmartDeviceOnOff(1, 1, true);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("+r=|$FF8 !P");
      CasaInteligente casaInteligente0 = new CasaInteligente("+r=|$FF8 !P", 2001, "+r=|$FF8 !P");
      energySupplier0.addCasaInteligente(2001, casaInteligente0, "+r=|$FF8 !P");
      energySupplier0.addSmartDevice(2001, 382, "+r=|$FF8 !P", (SmartDevice) null);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("bSuV~^Fs");
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      
      energySupplier0.setTaxes(0.0);
      double double0 = energySupplier0.getTaxes();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("j4J!\"pgCI[", (-2400.747005756));
      energySupplier0.setTaxes((-2400.747005756));
      double double0 = energySupplier0.getTaxes();
      assertEquals((-2400.747005756), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      double double0 = energySupplier0.getPrice();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.setPrice((-152.9997));
      double double0 = energySupplier0.getPrice();
      assertEquals((-152.9997), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.setName((String) null);
      energySupplier0.getName();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier(" ; ");
      energySupplier0.getName();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("n4dL&rRSZ~+S54");
      energySupplier0.setInvoicesList((ArrayList<Invoice>) null);
      energySupplier0.getInvoices();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("bSuV~^Fs");
      energySupplier0.addInvoice("`O2`RKt17H^P&3F", 0, 1, 0, 0);
      energySupplier0.getInvoices();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("+r=|$FF8 !P", 0.1);
      energySupplier0.setHouses((Map<Integer, CasaInteligente>) null);
      energySupplier0.getHouses();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.1, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("");
      energySupplier0.addCasaInteligente("", 0, "");
      energySupplier0.getHouses();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      CasaInteligente casaInteligente0 = new CasaInteligente("", 0);
      energySupplier0.addCasaInteligente(0, casaInteligente0, "*ui$");
      energySupplier0.getHouse(0);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("z]M}nLETeuvFj");
      energySupplier0.addCasaInteligente("z]M}nLETeuvFj", 39, "z]M}nLETeuvFj");
      CasaInteligente casaInteligente0 = energySupplier0.getHouse(39);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(39, casaInteligente0.getOwnerNIF());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      CasaInteligente casaInteligente0 = new CasaInteligente("", (-1));
      energySupplier0.addCasaInteligente((-1), casaInteligente0, "`i^+YO~S");
      energySupplier0.getHouse((-1));
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      double double0 = energySupplier0.dailyConsumption();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("bSuV~^Fs");
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      
      energySupplier0.setTaxes(0.0);
      EnergySupplier energySupplier1 = energySupplier0.clone();
      assertTrue(energySupplier1.equals((Object)energySupplier0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("", (-29.4));
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      
      energySupplier0.setPrice((-29.4));
      EnergySupplier energySupplier1 = energySupplier0.clone();
      assertTrue(energySupplier1.equals((Object)energySupplier0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebResult", 0.0);
      energySupplier0.setHouses((Map<Integer, CasaInteligente>) null);
      // Undeclared exception!
      try { 
        energySupplier0.removeCasaInteligente((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier((String) null, (-2779.04927));
      EnergySupplier energySupplier1 = energySupplier0.clone();
      // Undeclared exception!
      try { 
        energySupplier0.equals(energySupplier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier((String) null, 0.0);
      // Undeclared exception!
      try { 
        energySupplier0.dailyConsumption();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      CasaInteligente casaInteligente0 = new CasaInteligente("", (-1829));
      energySupplier0.addCasaInteligente((-1829), casaInteligente0, "");
      // Undeclared exception!
      try { 
        energySupplier0.consumoTotal((Map<Integer, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("izm^h");
      energySupplier0.setInvoicesList((ArrayList<Invoice>) null);
      // Undeclared exception!
      try { 
        energySupplier0.addInvoice("izm^h", (-531), (-531), (-531), (-531));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.setHouses((Map<Integer, CasaInteligente>) null);
      // Undeclared exception!
      try { 
        energySupplier0.addCasaInteligente("8", (-1938), "4/PmDU->qf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("Lu", 0.0);
      // Undeclared exception!
      try { 
        energySupplier0.addCasaInteligente(0, (CasaInteligente) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EnergySupplier energySupplier0 = null;
      try {
        energySupplier0 = new EnergySupplier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EnergySupplier energySupplier0 = null;
      try {
        energySupplier0 = new EnergySupplier((EnergySupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("");
      energySupplier0.setName("#vOTDmXa.pI*");
      double double0 = energySupplier0.dailyConsumption();
      assertEquals(1.2000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("9");
      double double0 = energySupplier0.dailyConsumption();
      assertEquals(0.2, double0, 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier(" ] : Pre\u00E7o : ");
      double double0 = energySupplier0.getTaxes();
      assertEquals(0.23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("`KRW\nJ/>");
      EnergySupplier energySupplier1 = new EnergySupplier(energySupplier0);
      assertTrue(energySupplier1.equals((Object)energySupplier0));
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier(" ; ");
      double double0 = energySupplier0.getPrice();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.getName();
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.getInvoices();
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("`KRWJ/>", 74.80989977468485);
      EnergySupplier energySupplier1 = new EnergySupplier("`KRWJ/>");
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertFalse(boolean0);
      assertEquals(74.80989977468485, energySupplier0.getPrice(), 0.01);
      assertFalse(energySupplier1.equals((Object)energySupplier0));
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      EnergySupplier energySupplier1 = energySupplier0.clone();
      energySupplier1.setTaxes((-341));
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertEquals((-341.0), energySupplier1.getTaxes(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("8", (-36));
      EnergySupplier energySupplier1 = new EnergySupplier(":", (-36));
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertEquals(0.0, energySupplier1.getPrice(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("izm^h");
      energySupplier0.addInvoice("izm^h", (-531), 0, 0, (-531));
      EnergySupplier energySupplier1 = new EnergySupplier((String) null, 456.787003088);
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(456.787003088, energySupplier1.getPrice(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("izm^h");
      EnergySupplier energySupplier1 = energySupplier0.clone();
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      Object object0 = new Object();
      boolean boolean0 = energySupplier0.equals(object0);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("EnergySupplier", 0.1);
      boolean boolean0 = energySupplier0.equals((Object) null);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.1, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier((String) null, (-2779.04927));
      boolean boolean0 = energySupplier0.equals(energySupplier0);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      EnergySupplier energySupplier1 = new EnergySupplier();
      assertTrue(energySupplier1.equals((Object)energySupplier0));
      
      energySupplier1.addCasaInteligente("", (-1938), "4/PmDU->qf");
      boolean boolean0 = energySupplier0.equals(energySupplier1);
      assertFalse(energySupplier1.equals((Object)energySupplier0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("izm^h");
      energySupplier0.addInvoice("izm^h", (-531), 0, 0, (-531));
      double double0 = energySupplier0.maxValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.addCasaInteligente(",umA(Lwuq", (-1196), ",umA(Lwuq");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      energySupplier0.consumoTotal(hashMap0);
      assertEquals(1, hashMap0.size());
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      Map<Integer, CasaInteligente> map0 = energySupplier0.getHouses();
      energySupplier0.setHouses(map0);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("EnergySupplier", 0.1);
      // Undeclared exception!
      try { 
        energySupplier0.getHouse(2001);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.removeCasaInteligente(1);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
      assertEquals(0.23, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier();
      energySupplier0.setInvoicesList((ArrayList<Invoice>) null);
      // Undeclared exception!
      try { 
        energySupplier0.maxValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("EnergySupplier", 0.1);
      // Undeclared exception!
      try { 
        energySupplier0.addSmartDevice(2001, 2001, "EnergySupplier", (SmartDevice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EnergySupplier energySupplier0 = new EnergySupplier("izm^h");
      String string0 = energySupplier0.toString();
      assertEquals("[Fornecedor izm^h ] : Pre\u00E7o : 5.0 | Taxas : 0.23 ; ", string0);
  }
}
