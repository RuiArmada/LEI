/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 17:56:04 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Suppliers_ESTest extends Suppliers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      SmartCamera smartCamera0 = new SmartCamera((-3744), (-1), (-2291), 0.0, (-1));
      // Undeclared exception!
      try { 
        suppliers0.addSmartDevice("*u\"/'\"uU !9", (-1), (-3744), " id = ", smartCamera0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.addCasaInteligente("+'/M~VS H[B.T|", (-2525), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("UdI@ 6Chf~ooD");
      suppliers0.removeCasaInteligente("UdI@ 6Chf~ooD", (-2106));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("(k_V", (double) (-1903));
      suppliers0.addCasaInteligente("(k_V", (-1903), "(k_V");
      SmartBulb smartBulb0 = new SmartBulb((-997), (double) 1, 0.0, 795.607703);
      suppliers0.addSmartDevice("(k_V", (-1903), 1, "(k_V", smartBulb0);
      assertEquals(1, SmartBulb.NEUTRAL);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      EnergySupplier energySupplier0 = new EnergySupplier(">HS;}My");
      hashMap0.put("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebMethod", energySupplier0);
      CasaInteligente casaInteligente0 = new CasaInteligente("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebMethod", 0);
      suppliers0.addCasaInteligente("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebMethod", (-1), casaInteligente0);
      assertEquals("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebMethod", casaInteligente0.getSupplier());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      String string0 = suppliers0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("SmartSpeaker", (double) (-1916));
      EnergySupplier energySupplier0 = suppliers0.getSupplier("SmartSpeaker");
      energySupplier0.setTaxes(0.0);
      double double0 = suppliers0.getTaxesEnergySupplier("SmartSpeaker");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      suppliers0.addEnergySupplier("-r1Gb(");
      double double0 = suppliers0.getTaxesEnergySupplier("-r1Gb(");
      assertEquals(0.23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      suppliers0.addEnergySupplier("k-X2bAlU*dlO");
      EnergySupplier energySupplier0 = suppliers0.getSupplier("k-X2bAlU*dlO");
      energySupplier0.setTaxes((-1.0));
      BiFunction<Object, Object, EnergySupplier> biFunction0 = (BiFunction<Object, Object, EnergySupplier>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(energySupplier0).when(biFunction0).apply(any() , any());
      hashMap0.compute("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebResult", biFunction0);
      double double0 = suppliers0.getTaxesEnergySupplier("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlWebResult");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      EnergySupplier energySupplier0 = new EnergySupplier("");
      hashMap0.put("", energySupplier0);
      Suppliers suppliers0 = new Suppliers(hashMap0);
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("`pn", (double) (-1906));
      suppliers0.setTaxesEnergySupplier("`pn", 0.0);
      EnergySupplier energySupplier0 = suppliers0.getSupplier("`pn");
      assertEquals(0.0, energySupplier0.getTaxes(), 0.01);
      assertEquals(0.0, energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      EnergySupplier energySupplier0 = new EnergySupplier();
      hashMap0.put("", energySupplier0);
      suppliers0.setTaxesEnergySupplier("", (-1594));
      EnergySupplier energySupplier1 = suppliers0.getSupplier("");
      assertEquals((-1594.0), energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("(k_V", (double) (-1903));
      suppliers0.setPriceEnergySupplier("(k_V", (-1903));
      EnergySupplier energySupplier0 = suppliers0.getSupplier("(k_V");
      assertEquals((-1903.0), energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      EnergySupplier energySupplier0 = new EnergySupplier();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      suppliers0.addEnergySupplier(energySupplier0);
      EnergySupplier energySupplier1 = suppliers0.getSupplier("");
      assertEquals(0.0, energySupplier1.dailyConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("", 0.0);
      double double0 = suppliers0.getPriceEnergySupplier("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("`pn");
      double double0 = suppliers0.getPriceEnergySupplier("`pn");
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("", (double) (-1903));
      suppliers0.setPriceEnergySupplier("", (-1903));
      double double0 = suppliers0.getPriceEnergySupplier("");
      assertEquals((-1903.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.getSupplier("I;0GUNyF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier("JZ5}8S5", (double) 124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("EnergySupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Suppliers suppliers0 = null;
      try {
        suppliers0 = new Suppliers((Suppliers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      boolean boolean0 = suppliers0.equals("oL5@[+trD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      boolean boolean0 = suppliers0.equals(suppliers0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.getPriceEnergySupplier("SmartSpeaker");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.setSmartDeviceOnOff("!}&Yb^5XVI(A_]17.l", 10, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.removeCasaInteligente("SmartSpeaker", (-1916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      suppliers0.setSuppliers(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      Suppliers suppliers1 = suppliers0.clone();
      assertFalse(suppliers1.equals((Object)suppliers0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      CasaInteligente casaInteligente0 = new CasaInteligente("~\"PJ9a**~2", (-1711), "~\"PJ9a**~2");
      // Undeclared exception!
      try { 
        suppliers0.addCasaInteligente("~\"PJ9a**~2", (-1711), casaInteligente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.setPriceEnergySupplier("SmartSpeaker", (-1916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      Suppliers suppliers1 = new Suppliers(suppliers0);
      boolean boolean0 = suppliers0.equals(suppliers1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.setTaxesEnergySupplier("h", (-1547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.getTaxesEnergySupplier("SmartSpeaker");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      EnergySupplier energySupplier0 = suppliers0.getSupplier("SmartSpeaker");
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier(energySupplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }
}
