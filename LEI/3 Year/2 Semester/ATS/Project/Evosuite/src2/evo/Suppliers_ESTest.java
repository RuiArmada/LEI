/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 14:29:49 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Suppliers_ESTest extends Suppliers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.setSmartDeviceOnOff("com.oracle.xmlns.internal.webservices.jaxws_databinding.XmlSOAPBinding", (-1455), 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker();
      // Undeclared exception!
      try { 
        suppliers0.addSmartDevice("grON", (-90), 0, (String) null, smartSpeaker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      EnergySupplier energySupplier0 = new EnergySupplier("Suppliers", 0.0);
      hashMap0.put("", energySupplier0);
      suppliers0.removeCasaInteligente("", 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("");
      CasaInteligente casaInteligente0 = new CasaInteligente();
      suppliers0.addCasaInteligente("", 39, casaInteligente0);
      SmartCamera smartCamera0 = new SmartCamera(20);
      suppliers0.addSmartDevice("", 39, 39, "", smartCamera0);
      assertEquals(0.0, smartCamera0.getInstallationCost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      EnergySupplier energySupplier0 = new EnergySupplier("|EP)", 0.2);
      hashMap0.put("].", energySupplier0);
      Suppliers suppliers0 = new Suppliers(hashMap0);
      suppliers0.addCasaInteligente(")HRaGML%vHO`9", (-3734), "].");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      EnergySupplier energySupplier0 = new EnergySupplier("");
      suppliers0.addEnergySupplier(energySupplier0);
      suppliers0.setTaxesEnergySupplier("", 0);
      double double0 = suppliers0.getTaxesEnergySupplier("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      EnergySupplier energySupplier0 = new EnergySupplier("Suppliers", 0.0);
      hashMap0.put("", energySupplier0);
      double double0 = suppliers0.getTaxesEnergySupplier("");
      assertEquals(0.23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("", 0.0);
      suppliers0.setTaxesEnergySupplier("", (-1.0));
      double double0 = suppliers0.getTaxesEnergySupplier("");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.setSuppliers((Map<String, EnergySupplier>) null);
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("");
      suppliers0.setTaxesEnergySupplier("", 0.0);
      EnergySupplier energySupplier0 = suppliers0.getSupplier("");
      assertEquals(0.0, energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("");
      suppliers0.setTaxesEnergySupplier("", (-970.31547472));
      EnergySupplier energySupplier0 = suppliers0.getSupplier("");
      assertEquals((-970.31547472), energySupplier0.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("");
      suppliers0.setPriceEnergySupplier("", (-1.0));
      EnergySupplier energySupplier0 = suppliers0.getSupplier("");
      assertEquals((-1.0), energySupplier0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      EnergySupplier energySupplier0 = new EnergySupplier(", consumption=");
      suppliers0.addEnergySupplier(energySupplier0);
      EnergySupplier energySupplier1 = suppliers0.getSupplier(", consumption=");
      assertEquals(0.23, energySupplier1.getTaxes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      EnergySupplier energySupplier0 = new EnergySupplier("");
      suppliers0.addEnergySupplier(energySupplier0);
      double double0 = suppliers0.getPriceEnergySupplier("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("6D&J9P7C](eZ");
      double double0 = suppliers0.getPriceEnergySupplier("6D&J9P7C](eZ");
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.addEnergySupplier("", (-2364.9045827));
      suppliers0.setPriceEnergySupplier("", (-178));
      double double0 = suppliers0.getPriceEnergySupplier("");
      assertEquals((-178.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      suppliers0.setSuppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.getSupplier(".+`gf^<QAJ~~2[/hRP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier("|_`Q`2K@[E/me|5&", (-3057.8975));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers((Map<String, EnergySupplier>) null);
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier("d@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.addEnergySupplier((EnergySupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Suppliers suppliers0 = null;
      try {
        suppliers0 = new Suppliers((Suppliers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers1 = new Suppliers(hashMap0);
      boolean boolean0 = suppliers0.equals(suppliers1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      boolean boolean0 = suppliers0.equals(suppliers0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      boolean boolean0 = suppliers0.equals(map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.getPriceEnergySupplier("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.removeCasaInteligente("`", 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      Suppliers suppliers1 = suppliers0.clone();
      assertNotSame(suppliers0, suppliers1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      CasaInteligente casaInteligente0 = new CasaInteligente("Suppliers", 669);
      // Undeclared exception!
      try { 
        suppliers0.addCasaInteligente("Suppliers", (-2178), casaInteligente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      String string0 = suppliers0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.setPriceEnergySupplier("Suppliers", (-3422.371));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      Suppliers suppliers1 = new Suppliers(suppliers0);
      assertFalse(suppliers1.equals((Object)suppliers0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      // Undeclared exception!
      try { 
        suppliers0.setTaxesEnergySupplier("PAYLOAD", (-2923.9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.getTaxesEnergySupplier("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      EnergySupplier energySupplier0 = suppliers0.getSupplier("Suppliers");
      assertNull(energySupplier0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Suppliers suppliers0 = new Suppliers();
      EnergySupplier energySupplier0 = new EnergySupplier();
      suppliers0.addEnergySupplier(energySupplier0);
      Map<String, EnergySupplier> map0 = suppliers0.getSuppliers();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, EnergySupplier> hashMap0 = new HashMap<String, EnergySupplier>();
      Suppliers suppliers0 = new Suppliers(hashMap0);
      // Undeclared exception!
      try { 
        suppliers0.addCasaInteligente("", 125, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Suppliers", e);
      }
  }
}
