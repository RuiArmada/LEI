/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 18:07:34 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Invoice_ESTest extends Invoice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Invoice invoice0 = new Invoice("'[K{{Z+##RqBa#IV", 0, (-2716), 1.0, 1.0);
      Invoice invoice1 = invoice0.clone();
      assertEquals(1.0, invoice0.getTotalPrice(), 0.01);
      
      invoice0.setTotalPrice(0.0);
      boolean boolean0 = invoice1.equals(invoice0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Invoice invoice0 = new Invoice("", 1724, 0, 1724, 0);
      Invoice invoice1 = new Invoice("", 1724, 0, 0, 1724);
      boolean boolean0 = invoice0.equals(invoice1);
      assertEquals(1724.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(1724.0, invoice1.getTotalPrice(), 0.01);
      assertFalse(boolean0);
      assertEquals(1724, invoice1.getNif());
      assertEquals(0, invoice1.getDays());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Invoice invoice0 = new Invoice("ownerNIF='", 125, 1049, (-391.49), (-1.0));
      Invoice invoice1 = new Invoice("ownerNIF='", 125, 2347, 0.0, 6590.6005607215875);
      boolean boolean0 = invoice0.equals(invoice1);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(2347, invoice1.getDays());
      assertEquals(125, invoice1.getNif());
      assertEquals(6590.6005607215875, invoice1.getTotalPrice(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, invoice1.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Invoice invoice0 = new Invoice("'[K{{Z+##RqBa#IV", 0, (-2716), 1.0, 1.0);
      assertEquals(1.0, invoice0.getTotalPrice(), 0.01);
      
      invoice0.setTotalPrice(0.0);
      double double0 = invoice0.getTotalPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      
      invoice0.setTotalPrice((-1.0));
      double double0 = invoice0.getTotalPrice();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Invoice invoice0 = new Invoice("ownerNIF='", 125, 1049, (-391.49), (-1.0));
      double double0 = invoice0.getTotalConsumption();
      assertEquals(125, invoice0.getNif());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1049, invoice0.getDays());
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      
      invoice0.setTotalConsumption((-1.0));
      double double0 = invoice0.getTotalConsumption();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      invoice0.setSupplier("uoy7");
      invoice0.getSupplier();
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getDays());
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      invoice0.getSupplier();
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getDays());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Invoice invoice0 = new Invoice("", 0, 1, 1, 1);
      assertEquals(0, invoice0.getNif());
      
      invoice0.setNif(1);
      int int0 = invoice0.getNif();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Invoice invoice0 = new Invoice((String) null, (-1182), (-1182), (-1182), 0.0);
      assertEquals(0, invoice0.getNif());
      
      invoice0.setNif((-1182));
      int int0 = invoice0.getNif();
      assertEquals((-1182), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      int int0 = invoice0.getDays();
      assertEquals(0, int0);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Invoice invoice0 = new Invoice("Invoice", (-1), (-1), 2780.941957362256, (-964.63935024153));
      assertEquals(0, invoice0.getDays());
      
      invoice0.setDays((-1));
      int int0 = invoice0.getDays();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      invoice0.setTotalPrice((-868));
      invoice0.clone();
      assertEquals((-868.0), invoice0.getTotalPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      
      invoice0.setTotalConsumption((-1.0));
      invoice0.clone();
      assertEquals((-1.0), invoice0.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Invoice invoice0 = new Invoice("'[K{{Z+##RqBa#IV", 0, (-2716), 1.0, 1.0);
      assertEquals(0, invoice0.getNif());
      
      invoice0.setNif((-2716));
      invoice0.clone();
      assertEquals(1.0, invoice0.getTotalPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Invoice invoice0 = new Invoice("", 2034, 2034, 0.0, 2034);
      Invoice invoice1 = invoice0.clone();
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(2034, invoice0.getNif());
      assertEquals(2034, invoice1.getDays());
      assertEquals(2034.0, invoice1.getTotalPrice(), 0.01);
      assertEquals(2034, invoice1.getNif());
      assertTrue(invoice1.equals((Object)invoice0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      invoice0.setDays((-1479));
      invoice0.clone();
      assertEquals((-1479), invoice0.getDays());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Invoice invoice0 = null;
      try {
        invoice0 = new Invoice((Invoice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Invoice", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Invoice invoice0 = new Invoice("", 0, 1, 1, 1);
      double double0 = invoice0.getTotalConsumption();
      assertEquals(1, invoice0.getDays());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getNif());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Invoice invoice0 = new Invoice("'[K{{Z+##RqBa#IV", 0, (-2716), 1.0, 1.0);
      double double0 = invoice0.getTotalPrice();
      assertEquals(0, invoice0.getDays());
      assertEquals(0, invoice0.getNif());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, invoice0.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Invoice invoice0 = new Invoice("", 0, 1, 1, 1);
      int int0 = invoice0.getDays();
      assertEquals(1, int0);
      assertEquals(0, invoice0.getNif());
      assertEquals(1.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(1.0, invoice0.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Invoice invoice0 = new Invoice((String) null, (-1182), (-1182), (-1182), 0.0);
      invoice0.getSupplier();
      assertEquals(0, invoice0.getDays());
      assertEquals(0, invoice0.getNif());
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Invoice invoice0 = new Invoice((String) null, (-1182), (-1182), (-1182), 0.0);
      int int0 = invoice0.getNif();
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getDays());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      Invoice invoice1 = new Invoice();
      invoice1.setTotalPrice((-1015.5794043670223));
      boolean boolean0 = invoice1.equals(invoice0);
      assertEquals((-1015.5794043670223), invoice1.getTotalPrice(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      Invoice invoice1 = new Invoice(invoice0);
      invoice1.setTotalConsumption(1703);
      boolean boolean0 = invoice0.equals(invoice1);
      assertEquals(1703.0, invoice1.getTotalConsumption(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Invoice invoice0 = new Invoice(";y", (-2126834712), (-2126834712), (-2126834712), (-2126834712));
      Invoice invoice1 = new Invoice(invoice0);
      assertEquals(0, invoice1.getDays());
      
      invoice1.setDays((-2126834712));
      boolean boolean0 = invoice0.equals(invoice1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Invoice invoice0 = new Invoice(";y", (-2126834712), (-2126834712), (-2126834712), (-2126834712));
      Invoice invoice1 = new Invoice(invoice0);
      boolean boolean0 = invoice0.equals(invoice1);
      assertEquals(0, invoice1.getDays());
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(0, invoice1.getNif());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      boolean boolean0 = invoice0.equals(invoice0);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Invoice invoice0 = new Invoice(";y", (-2126834712), (-2126834712), (-2126834712), (-2126834712));
      Object object0 = new Object();
      boolean boolean0 = invoice0.equals(object0);
      assertEquals(0.0, invoice0.getTotalConsumption(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, invoice0.getTotalPrice(), 0.01);
      assertEquals(0, invoice0.getDays());
      assertEquals(0, invoice0.getNif());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Invoice invoice0 = new Invoice();
      String string0 = invoice0.toString();
      assertEquals("Invoice{ownerNIF='0', supplier=, days=0, totalConsumption=0.0, totalPrice='0.0'}", string0);
  }
}
